<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="Manager.ttinclude" #>
<#@ assembly name="System.Web.Extensions" #>
<#@ output extension=".ignore" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Web.Script.Serialization" #>
<# // To debug, uncomment the next two lines
// System.Diagnostics.Debugger.Launch();
// System.Diagnostics.Debugger.Break();
#>
<#
var manager = Manager.Create(Host, GenerationEnvironment);
manager.StartHeader();
#>
// <auto-generated>
//     This file was generated by a T4 template.
//     Don't change it directly as your change would get overwritten. Instead, make changes
//     to the .tt file (i.e. the T4 template) and save it to regenerate this file.
// </auto-generated>
<#
manager.EndBlock();

var typesJson = File.ReadAllText(this.Host.ResolvePath("Types.json"));
var serializer = new JavaScriptSerializer();
var typesObj = serializer.Deserialize<Dictionary<string, Dictionary<string, string>>>(typesJson);

foreach (var typeName in typesObj.Keys)
{
    var className = (typeName == "" ? "Wrapper<T>" : Prettify(typeName));
    manager.StartNewFile((typeName == "" ? "Wrapper" : Prettify(typeName)) + ".cs");
#>

using System;
using System.Text.Json.Serialization;

namespace StackExchange.StacMan
{
    /// <summary>
    /// StacMan <#= (typeName == "" ? "Wrapper" : className) #>, corresponding to Stack Exchange API v2's <#= (typeName == "" ? "common wrapper" : typeName) #> type
    /// http://api.stackexchange.com/docs/<#= (typeName == "" ? "wrapper" : "types/" + typeName.Replace("_", "-")) #>
    /// </summary>
    public partial class <#= className #> : StacManType
    {
<# 
    var fieldsObj = typesObj[typeName];
        
    foreach (var field in fieldsObj)
    {
        var fieldName = field.Key;
        var fieldMinApiVersion = "2.0";

        var fieldVersionMatch = VersionRegex.Match(fieldName);
        if (fieldVersionMatch.Success)
        {
            fieldName = VersionRegex.Replace(fieldName, "");
            fieldMinApiVersion = fieldVersionMatch.Groups["version"].Value;
        }

        var propertyName = Prettify(fieldName);

        // member names cannot be the same as their enclosing type (this only affects "filter")
        if (propertyName == className)
            propertyName += "Name";

        var propertyTypeName = field.Value;
#>
        /// <summary>
        /// <#= fieldName #><#= fieldMinApiVersion != "2.0" ? String.Format(" -- introduced in API version {0}", fieldMinApiVersion) : "" #>
        /// </summary>
        [JsonPropertyName("<#= fieldName #>")]
        public <#= propertyTypeName #> <#= propertyName #> { get; init; }

<#
    }
#>
    }
}
<#
    manager.EndBlock();
}
manager.Process(true);
#>

<#+
static Regex VersionRegex = new Regex("\\((?<version>.*)\\)$", RegexOptions.Compiled);

// convert "foo_bar" to "FooBar"
string Prettify(string name)
{
    var sb = new StringBuilder();
    bool capitalize = true;

    foreach (var c in name)
    {
        if (c == '_')
        {
            capitalize = true;
            continue;
        }

        if (capitalize)
        {
            sb.Append(char.ToUpper(c));
            capitalize = false;
        }
        else
        {
            sb.Append(c);
        }
    }

    return sb.ToString();
}
#>