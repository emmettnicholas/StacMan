<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="Manager.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Web.Extensions" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop.8.0" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ output extension=".ignore" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Web.Script.Serialization" #>
<#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<# // To debug, uncomment the next two lines
// System.Diagnostics.Debugger.Launch();
// System.Diagnostics.Debugger.Break();
#>
<#
var manager = Manager.Create(Host, GenerationEnvironment);
manager.StartHeader();
#>
// <auto-generated>
//     This file was generated by a T4 template.
//     Don't change it directly as your change would get overwritten. Instead, make changes
//     to the .tt file (i.e. the T4 template) and save it to regenerate this file.
// </auto-generated>

<#
manager.EndBlock();

var methodsJson = File.ReadAllText(this.Host.ResolvePath("Methods.json"));
var serializer = new JavaScriptSerializer();
var typesObj = serializer.Deserialize<Dictionary<string, object>>(methodsJson);

foreach (var typeName in typesObj.Keys)
{
    var interfaceName = "I" + typeName + "Methods";
    var methodsPropertyName = typeName + (typeName == "Info" || typeName == "Search" || typeName == "Inbox" ? "" : "s");
    var methodsObj = (Dictionary<string, object>)typesObj[typeName];
    var interfaceSignatures = new List<InterfaceSignature>();

    manager.StartNewFile("StacManClient." + typeName + "Methods.cs");
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Web;

namespace StackExchange.StacMan
{
    public partial class StacManClient : <#= interfaceName #>
    {
        /// <summary>
        /// Stack Exchange API <#= methodsPropertyName #> methods
        /// </summary>
        public <#= interfaceName #> <#= methodsPropertyName #>
        {
            get { return this; }
        }
<#
    foreach (var methodKey in methodsObj.Keys)
    {
        string methodName = OverloadRegex.Replace(methodKey, "");

        var requiredParams = new List<Parameter>();
        var optionalParams = new List<Parameter>();

        optionalParams.Add(new Parameter("filter", "string"));

        var methodObj = (Dictionary<string, object>)methodsObj[methodKey];
        var description = (string)methodObj["description"];
        var url = (string)methodObj["url"];
        var minApiVersion = methodObj.ContainsKey("minApiVersion") ? (string)methodObj["minApiVersion"] : "2.0";
        var httpMethod = methodObj.ContainsKey("httpMethod") ? (string)methodObj["httpMethod"] : "GET";
        var returnTypeName = methodObj.ContainsKey("returnType") ? (string)methodObj["returnType"] : typeName;

        var isNetworkMethod = methodObj.ContainsKey("isNetworkMethod") && (bool)methodObj["isNetworkMethod"];
        if (!isNetworkMethod)
            requiredParams.Add(new Parameter("site", "string"));

        var authRequired = methodObj.ContainsKey("authRequired") && (bool)methodObj["authRequired"];
        if (authRequired)
            requiredParams.Add(new Parameter("access_token", "string"));

        if (methodObj.ContainsKey("required"))
        {
            var requiredObj = (Dictionary<string, object>)methodObj["required"];
            requiredParams.AddRange(requiredObj.Select(p => new Parameter(p.Key, (string)p.Value)));
        }

        var hasPaging = methodObj.ContainsKey("hasPaging") && (bool)methodObj["hasPaging"];
        if (hasPaging)
        {
            optionalParams.Add(new Parameter("page", "int?"));
            optionalParams.Add(new Parameter("pagesize", "int?"));
        }

        var hasFromToDate = methodObj.ContainsKey("hasFromToDate") && (bool)methodObj["hasFromToDate"];
        if (hasFromToDate)
        {
            optionalParams.Add(new Parameter("fromdate", "DateTime?"));
            optionalParams.Add(new Parameter("todate", "DateTime?"));
        }

        IEnumerable<Parameter> sortParams = null;
        var hasSort = methodObj.ContainsKey("sortType");
        if (hasSort)
        {
            var sortType = (string)methodObj["sortType"];
            optionalParams.Add(new Parameter("sort", sortType + "?"));
            sortParams = GetSortParameters(sortType);
            optionalParams.AddRange(sortParams);
            optionalParams.Add(new Parameter("order", "Order?"));
        }

        if (methodObj.ContainsKey("optional"))
        {
            var optionalObj = (Dictionary<string, object>)methodObj["optional"];
            optionalParams.AddRange(optionalObj.Select(p => new Parameter(p.Key, (string)p.Value)));
        }

        var paramsString = String.Join(", ", requiredParams.Concat(optionalParams).Select(p => p.Type + " " + p.VariableName));

        var interfaceParamsString = String.Join(", ", 
            requiredParams.Select(p => p.Type + " " + p.VariableName)
                .Concat(optionalParams.Select(p => p.Type + " " + p.VariableName + " = null")));
#>

        Task<StacManResponse<<#= returnTypeName #>>> <#= interfaceName#>.<#= methodName #>(<#= paramsString #>)
        {
<#
        foreach (var param in requiredParams)
        {
            if (param.Type == "string")
            {
#>
            ValidateString(<#= param.VariableName #>, "<#= param.Name #>");
<#
            }
            else if (param.Type.StartsWith("IEnumerable"))
            {
#>
            ValidateEnumerable(<#= param.VariableName #>, "<#= param.Name #>");
<#
            }
        }

        if (minApiVersion != "2.0")
        {
#>
            ValidateMinApiVersion("<#= minApiVersion #>");
<#
        }

        if (hasPaging)
        {
#>
            ValidatePaging(page, pagesize);
<#
        }

        if (hasSort)
        {
#>
            ValidateSortMinMax(sort, <#= String.Join(", ", sortParams.Select(p => p.Name + ": " + p.VariableName)) #>);
<#
        }

        IEnumerable<string> urlParams;
        var urlTemplate = GetUrlTemplate(url, out urlParams);

        if (urlParams.Any())
        {
#>

            var ub = new ApiUrlBuilder(host, Version, String.Format("<#= urlTemplate #>", <#=
                String.Join(", ", urlParams.Select(p =>
                    {
                        var param = requiredParams.Single(rp => rp.Name == p);
                        if (param.Type == "IEnumerable<string>")
                        {
                            return "String.Join(\";\", " + param.Name + ".Select(HttpUtility.UrlEncode))";
                        }
                        else if (param.Type.StartsWith("IEnumerable"))
                        {
                            return "String.Join(\";\", " + param.Name + ")";
                        }
                        return param.Name;
                    }))
                #>), useHttps: <#= authRequired ? "true" : "false" #>);

<#
        }
        else
        {
#>

            var ub = new ApiUrlBuilder(host, Version, "<#= url #>", useHttps: <#= authRequired ? "true" : "false" #>);

<#
        }

        foreach (var param in requiredParams.Where(p => !urlParams.Contains(p.Name)).Concat(optionalParams))
        {
#>
            ub.AddParameter("<#= param.ApiName #>", <#= param.VariableName #>);
<#
        }
#>

            return CreateApiTask<<#= returnTypeName #>>(ub, HttpMethod.<#= httpMethod #>, "<#= GetBackoffKey(url) #>");
        }
<#
        var summary = String.Format("{0}{1} (API Method: \"{2}\"){3}",
            description,
            authRequired ? " [auth required]" : "",
            url,
            minApiVersion != "2.0" ? (" -- introduced in API version " + minApiVersion) : "");

        interfaceSignatures.Add(new InterfaceSignature(methodName, interfaceParamsString, returnTypeName, summary));
    }
#>
    }

    /// <summary>
    /// Stack Exchange API <#= methodsPropertyName #> methods
    /// </summary>
    public interface <#= interfaceName #>
    {
<#
    foreach (var i in interfaceSignatures)
    {
#>
        /// <summary>
        /// <#= i.Summary #>
        /// </summary>
        Task<StacManResponse<<#= i.ReturnTypeName #>>> <#= i.MethodName #>(<#= i.ParamsString #>);

<#
    }
#>
    }
}
<#
    manager.EndBlock();
}
manager.Process(true);
#>

<#+
static Regex OverloadRegex = new Regex("\\(overload.*\\)$", RegexOptions.Compiled);

class InterfaceSignature
{
    public InterfaceSignature(string methodName, string paramsString, string returnTypeName, string summary)
    {
        MethodName = methodName;
        ParamsString = paramsString;
        ReturnTypeName = returnTypeName;
        Summary = summary;
    }

    public readonly string MethodName, ParamsString, ReturnTypeName, Summary;
}

class Parameter
{
    public Parameter(string name, string type)
    {
        Name = name;
        Type = type;
        VariableName = CSharpKeywords.Contains(name) ? ("@" + name) : name;
        ApiName = name.StartsWith("min") ? "min" : (name.StartsWith("max") ? "max" : name);
    }

    public readonly string Name, Type, VariableName, ApiName;

    private static readonly string[] CSharpKeywords = new string[] { "abstract", "event", "new", "struct", "as", "explicit", "null", "switch", "base", "extern", "object", "this", "bool", "false", "operator", "throw", "break", "finally", "out", "true", "byte", "fixed", "override", "try", "case", "float", "params", "typeof", "catch", "for", "private", "uint", "char", "foreach", "protected", "ulong", "checked", "goto", "public", "unchecked", "class", "if", "readonly", "unsafe", "const", "implicit", "ref", "ushort", "continue", "in", "return", "using", "decimal", "int", "sbyte", "virtual", "default", "interface", "sealed", "volatile", "delegate", "internal", "short", "void", "do", "is", "sizeof", "while", "double", "lock", "stackalloc", "else", "long", "static", "enum", "namespace", "string" };
}

Solution _Solution;

Solution Solution
{
    get
    {
        if (_Solution == null)
        {
            DTE dte = null;

            // Get the DTE service from the host
            var serviceProvider = Host as IServiceProvider;
            if (serviceProvider != null) {
                dte = serviceProvider.GetService(typeof(SDTE)) as DTE;
            }

            // Fail if we couldn't get the DTE. This can happen when trying to run in TextTransform.exe
            if (dte == null) {
                throw new Exception("T4MVC can only execute through the Visual Studio host");
            }

            _Solution = dte.Solution;
        }
        return _Solution;
    }
}

IEnumerable<Parameter> GetSortParameters(string sortName)
{
    var projectItem = Solution.FindProjectItem(sortName.Replace('.', '/') + ".cs");
    var @namespace = projectItem.FileCodeModel.CodeElements.OfType<EnvDTE.CodeNamespace>().First();
    var @enum = @namespace.Members.OfType<CodeEnum>().First();

    var sortTypeNames = new HashSet<string>();

    foreach (CodeVariable2 sort in @enum.Members.OfType<CodeVariable2>())
    {
        var sortAttr = sort.Attributes.OfType<CodeAttribute2>().FirstOrDefault(a => a.Name == "Sort");
        if (sortAttr != null)
        {
            var sortTypeArg = sortAttr.Arguments.OfType<EnvDTE80.CodeAttributeArgument>().FirstOrDefault(a => a.Value.StartsWith("SortType"));
            sortTypeNames.Add(sortTypeArg.Value);
        }
    }
    
    return sortTypeNames.SelectMany(n => new Parameter[]
        {
            new Parameter(GetSortMinParameterName(n), GetSortParameterType(n)),
            new Parameter(GetSortMaxParameterName(n), GetSortParameterType(n))
        });
}

string GetSortParameterType(string sortTypeName)
{
    switch (sortTypeName)
    {
        case "SortType.DateTime":
            return "DateTime?";
        case "SortType.Integer":
            return "int?";
        case "SortType.String":
            return "string";
        case "SortType.BadgeRank":
            return "Badges.Rank?";
        case "SortType.BadgeType":
            return "Badges.BadgeType?";
        default:
            throw new ArgumentOutOfRangeException("sortTypeName");
    }
}

string GetSortMinParameterName(string sortTypeName)
{
    switch (sortTypeName)
    {
        case "SortType.DateTime":
            return "mindate";
        case "SortType.Integer":
            return "min";
        case "SortType.String":
            return "minname";
        case "SortType.BadgeRank":
            return "minrank";
        case "SortType.BadgeType":
            return "mintype";
        default:
            throw new ArgumentOutOfRangeException("sortTypeName");
    }
}

string GetSortMaxParameterName(string sortTypeName)
{
    switch (sortTypeName)
    {
        case "SortType.DateTime":
            return "maxdate";
        case "SortType.Integer":
            return "max";
        case "SortType.String":
            return "maxname";
        case "SortType.BadgeRank":
            return "maxrank";
        case "SortType.BadgeType":
            return "maxtype";
        default:
            throw new ArgumentOutOfRangeException("sortTypeName");
    }
}

static Regex UrlTemplateRegex = new Regex("\\{(?<param>[^\\}]*?)\\}", RegexOptions.Compiled);

string GetUrlTemplate(string url, out IEnumerable<string> paramNames)
{
    var urlParamNames = new List<string>();
    var urlParamIndex = 0;

    var template = UrlTemplateRegex.Replace(url, match =>
    {
        urlParamNames.Add(match.Groups["param"].Value);
        return "{" + (urlParamIndex++) + "}";
    });

    paramNames = urlParamNames;
    return template;
}

string GetBackoffKey(string url)
{
    if (url == "/users/{ids}" || url == "/me")
        return "/_users";

    return url
        .Replace("/users/{ids}/", "/_users/")
        .Replace("/users/{id}/", "/_users/")
        .Replace("/me/", "/_users/");
}
#>